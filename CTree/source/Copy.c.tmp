
/******************************************************************************
*
*   FILE
*   ----
*   Copy.c
*
*   History
*   -------
*   2018-01-21   File created
*
*******************************************************************************
*
*   This file is generated by the 'acplt_builder' command
*
******************************************************************************/


#ifndef OV_COMPILE_LIBRARY_CTree
#define OV_COMPILE_LIBRARY_CTree
#endif


#include "CTree.h"
#include "libov/ov_macros.h"
#include "libov/ov_string.h"
#include "libov/ov_path.h"
#include <stdio.h>
#include "string.h"

#define VERSION_FOR_CTREE 	2

OV_STRING crawl_tree(const OV_INSTPTR_ov_domain root,  OV_STRING* libs, OV_BOOL getvariables);

OV_STRING get_variables(const OV_INSTPTR_ov_domain pobj){
	OV_STRING result = "";
//	ov_memstack_lock();
//	OV_INSTPTR pparent = Ov_GetParent(ov_instantiation, pobj);
//	OV_INSTPTR pparobj = Ov_PtrUpCast(ov_object, pparent);
//	ov_memstack_unlock();
//	OV_INSTPTR var= NULL;
//	Ov_ForEachChild(ov_containment, pparobj, var){
//		OV_STRING tmp = "";
//		ov_string_append(&tmp, var->v_identifier);
//		ov_string_append(&tmp, " : ");
//		ov_string_append(&tmp, "0");
//		ov_string_append(&tmp, ",");
//
//	}
	return strclasp(result, "{", "}");
}

OV_DLLFNCEXPORT void CTree_Copy_typemethod(
	OV_INSTPTR_fb_functionblock	pfb,
	OV_TIME						*pltc
) {
    /*
    *   local variables
    */
    OV_INSTPTR_CTree_Copy pinst = Ov_StaticPtrCast(CTree_Copy, pfb);
    OV_INSTPTR_ov_domain root = NULL;

	OV_STRING tree = "";
	OV_STRING libs = "";

	OV_STRING liblist = "";
	OV_RESULT res = 0 ;

	root = ov_path_getobjectpointer(pinst->v_root, VERSION_FOR_CTREE);
	if(root==NULL){
		pinst->v_resstat = OV_ERR_BADPARAM;
		return;
	}
	//!!!check if root is accessable

	ov_string_append(&tree, strquot(root->v_identifier));
	ov_string_append(&tree, " : ");
	ov_string_append(&tree, crawl_tree(root, &libs, pinst->v_getvar));
	ov_string_append(&tree, ",");
	//checking libs and tree
	if(!libs || !tree){
		pinst->v_resstat = OV_ERR_BADVALUE;
		return;
	}

	libs[ov_string_getlength(libs)-1] = '\0';

//	libs
	ov_string_append(&liblist, strquot("Libraries"));
	ov_string_append(&liblist, " : ");
	ov_string_append(&liblist, strclasp(libs, "[", "]"));
	ov_string_append(&tree, liblist);



	tree = strclasp(tree, "{", "}");
	if(!tree)
		return;

	res = ov_string_setvalue(&pinst->v_tree, tree);
	if(res)
		return;
	res = ov_string_setvalue(&pinst->v_libs, liblist);
	if(res)
		return;
	ov_string_setvalue(&pinst->v_tree, tree);
	ov_string_setvalue(&pinst->v_libs, liblist);
    return;
}

OV_DLLFNCEXPORT OV_STRING CTree_Copy_getfactory(
		OV_INSTPTR_ov_domain obj
	) {
	if(!obj)
		return NULL;

	ov_memstack_lock();
	OV_INSTPTR pparent = Ov_GetParent(ov_instantiation, obj);
	OV_INSTPTR pparobj = Ov_PtrUpCast(ov_object, pparent);
	OV_STRING factory = ov_path_getcanonicalpath(pparobj, 2);
	ov_memstack_unlock();
    return strquot(factory);
}

OV_STRING crawl_tree(const OV_INSTPTR_ov_domain root,  OV_STRING* libs, OV_BOOL getvariables){
	OV_RESULT res = 0;
	OV_STRING result = "";
	OV_STRING fact = "";
	OV_STRING quotedlib = "";
	OV_STRING factory = strquot("factory");

	//variables
	if(getvariables){
		ov_string_append(&result, strquot("variables"));
		ov_string_append(&result, " : ");
		ov_string_append(&result, get_variables(root));
		ov_string_append(&result, ", ");
	}
	//factory
	res = ov_string_append(&fact, CTree_Copy_getfactory(root));
	if(res)
		return NULL;

	if(factory==NULL)
		return NULL;

	ov_string_append(&factory, " : ");
	ov_string_append(&factory, fact);
	ov_string_append(&result, factory);
	ov_string_append(&result, ",");

	//libraries
	OV_UINT len=0;
	OV_STRING* seperated = ov_string_split(fact, "/", &len);
	if(seperated == NULL)
		return NULL;

	if(len!=4)
		return NULL;

	res = ov_string_append(&quotedlib, strquot(seperated[2]));
	if(res)
		return NULL;

	if(!strstr(*libs, quotedlib)){
		ov_string_append(libs, quotedlib);
		ov_string_append(libs, ",");
	}


	//children
	OV_STRING Children = strquot("Children");
	ov_string_append(&Children, " : ");


	OV_STRING children = "";
	OV_INSTPTR_ov_domain child = NULL;

	Ov_ForEachChild(ov_containment, root, child){
		ov_string_append(&children, strquot(child->v_identifier));
		ov_string_append(&children, " : ");
		ov_string_append(&children, crawl_tree(child, libs, getvariables));
		res = ov_string_append(&children, ",");
		if(res)
			return NULL;
	}

	if (children[ov_string_getlength(children)-1] == ',')
		children[ov_string_getlength(children)-1] = '\0';

	ov_string_append(&Children, strclasp(children, "{", "}"));
	ov_string_append(&result, Children);
	return strclasp(result, "{", "}");
}
