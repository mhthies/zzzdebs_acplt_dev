#include "ov.ovm"
#include "fb.ovm"

#include "ksbase.ovm"
#include "ksxdr.ovm"
#include "ksapi.ovm"
#include "kshttp.ovm"

#include "eks.ovm"

LIBRARY CTree
	VERSION   = "V0.1 (15-Mon-2018)";
	AUTHOR    = "Zolboo Erdenebayar";
	COPYRIGHT = "Copyright (C) 2013 Lehrstuhl fuer Prozessleittechnik, RWTH Aachen";
	COMMENT   = "Upload and Download tree in json format";
	


	/**
		Documentation of Common.
		@note Javadoc syntax is allowed here.
		@attention Changes in this file will only generate new code in ./source/sourcetemplates/. Code in ./source/ is not overwritten. 
	*/
	
	CLASS Common : CLASS fb/functionblock
		VARIABLES
			result		:	INT FLAGS="o"
				COMMENT			= "Result: 0: Success; 1: Error; 4: Bad Param"
				INITIALVALUE	=	0;
			ErrorMsg:	STRING FLAGS="o" COMMENT = "Error log" INITIALVALUE="";
			trigger: INT HAS_SET_ACCESSOR FLAGS="i" COMMENT="trigger typemethod. any value other than 0 will do"  INITIALVALUE=0;
		END_VARIABLES;
	END_CLASS;
	
	CLASS Download : CLASS CTree/Common
		IS_INSTANTIABLE;
		VARIABLES
			json: STRING FLAGS="i" COMMENT="Tree to download as json format";
			path: STRING FLAGS="i" COMMENT="where to download" INITIALVALUE="/TechUnits";
			cache: C_TYPE <CTreeDownloadCache> COMMENT="Cache of Object";
		END_VARIABLES;
		OPERATIONS
			typemethod: C_FUNCTION <FB_FNC_TYPEMETHOD>;
		END_OPERATIONS;
	END_CLASS;
	
	/**
		Documentation of Copy.
		@note Javadoc syntax is allowed here.
		@attention Changes in this file will only generate new code in ./source/sourcetemplates/. Code in ./source/ is not overwritten. 
	*/
	CLASS Upload : CLASS CTree/Common
		IS_INSTANTIABLE;
		VARIABLES
			getVar: BOOL FLAGS="i" COMMENT="if variables should be copied" INITIALVALUE=TRUE;
			path: STRING FLAGS="i" COMMENT="path of object to upload as json" INITIALVALUE="/TechUnits";
			
			tree: STRING FLAGS="o" COMMENT="tree as json";
			libs: STRING FLAGS="o" COMMENT="libs used in tree";
			
			cache:	C_TYPE <CTreeUploadCache> COMMENT="Cache";
		END_VARIABLES;
		OPERATIONS
			typemethod: C_FUNCTION <FB_FNC_TYPEMETHOD>;
		END_OPERATIONS;
	END_CLASS;
	
	CLASS	Transport					:	CLASS	CTree/Upload
		IS_INSTANTIABLE;
		COMMENT	=	"Transport of tree from one server to another with Upload and Download";
		VARIABLES
			/* Input *************************************************/
			targetKS:	STRING FLAGS="i" COMMENT="IP:PORT/serverName/path of target object." INITIALVALUE="";
			targetPath:	STRING FLAGS="i" COMMENT="variable path of download object." INITIALVALUE="";
			
			holdConnection	:	BOOL FLAGS="i"
				COMMENT			=	"Tell client not to close the connection after each request"
				INITIALVALUE	=	FALSE;
			Reset		:	BOOL	HAS_SET_ACCESSOR
				FLAGS="i"
				COMMENT	=	"Rising edge triggers reset of Client object and sets status and result to 0"
				INITIALVALUE	= FALSE;
			autoUpload: BOOL FLAGS="i" COMMENT="if the Upload object in target server automatically created, triggered and deleted";
			
			status		:	INT FLAGS="o" 
				COMMENT			= "Status: 0: initial; 1: request sent, waiting for answer; 2: completed;"
				INITIALVALUE	=	0;
				
			//serverName	:	STRING;
			//serverHost	:	STRING;
			//Submit		:	BOOL	HAS_SET_ACCESSOR
			//	COMMENT	=	"Rising edge triggers submit function"
			//	INITIALVALUE	= FALSE;
		END_VARIABLES;
		
		OPERATIONS
			startup				:	C_FUNCTION <OV_FNC_STARTUP>;
			shutdown			:	C_FUNCTION <OV_FNC_SHUTDOWN>;
			submit				:	C_FUNCTION <CTREE_FNC_SUBMIT>;
			//getaccess			:	C_FUNCTION <OV_FNC_GETACCESS>;		/*	just to make all variables visible on KS	*/
			prepareSubmit		:	C_FUNCTION <CTREE_FNC_PREPSUBMIT>;
			genSetForSubmit		:	C_FUNCTION <CTREE_FNC_GENSETFSUBMIT>;
			typemethod			:	C_FUNCTION <FB_FNC_TYPEMETHOD>;
		END_OPERATIONS;
	END_CLASS;
	
	CLASS LoadLibs : CLASS CTree/Download
		IS_INSTANTIABLE;
		VARIABLES
			libBytes: ANY FLAGS="hi" COMMENT="Bibliotheken as byte";
			libNames[]: STRING FLAGS="i" COMMENT="Bibliotheken namen";
			libPosition[]: UINT FLAGS="i" COMMENT="Bibliotheken positionen";
		END_VARIABLES;
		PARTS
			eks:		CLASS	eks/client;
		END_PARTS;
		OPERATIONS
			constructor  : C_FUNCTION <OV_FNC_CONSTRUCTOR>;
			destructor   : C_FUNCTION <OV_FNC_DESTRUCTOR>;
			startup      : C_FUNCTION <OV_FNC_STARTUP>;
    		shutdown     : C_FUNCTION <OV_FNC_SHUTDOWN>;
    		
			typemethod: C_FUNCTION <FB_FNC_TYPEMETHOD>;
		END_OPERATIONS;
	END_CLASS;
	
	
	CLASS dbinfoExt : CLASS ov/object
		IS_INSTANTIABLE;
		VARIABLES
			serversystem : STRING             FLAGS = "o"  COMMENT = "Server-Plattform";
			serversystemarch : UINT             FLAGS = "o"  COMMENT = "Server-Plattform architecture";
			libraries[] : STRING   HAS_GET_ACCESSOR      FLAGS = "o"  COMMENT = "libs in ../addonlibs";
			lastUpdate : TIME   FLAGS = "o"  COMMENT = "Last update of libraries";
		END_VARIABLES;
		OPERATIONS
			constructor  : C_FUNCTION <OV_FNC_CONSTRUCTOR>;
			destructor   : C_FUNCTION <OV_FNC_DESTRUCTOR>;
			startup      : C_FUNCTION <OV_FNC_STARTUP>;
    		shutdown     : C_FUNCTION <OV_FNC_SHUTDOWN>;
			getaccess    : C_FUNCTION <OV_FNC_GETACCESS>;
		END_OPERATIONS;
	END_CLASS;

	CLASS helper : CLASS ov/object
		VARIABLES
		END_VARIABLES;
		OPERATIONS
			valueToStr 	: C_FUNCTION <VALUE_TO_STRING>;
			ovtypeToStr 	: C_FUNCTION <OVTYPE_TO_STRING>;
			kstypeToStr 	: C_FUNCTION <KSTYPE_TO_STRING>;
			strToOVType 	: C_FUNCTION <STRING_TO_OVTYPE>;
			strToKSType 	: C_FUNCTION <STRING_TO_KSTYPE>;
			strToValue 	: C_FUNCTION <STRING_TO_VALUE>;
			accessToStr	:	C_FUNCTION <ACCESS_TO_STRING>;
			getfactory	: C_FUNCTION <GET_FACTORY>;
			strlistcat: C_FUNCTION <STR_LIST_CAT>;
		END_OPERATIONS;
	END_CLASS;
	
	
	CLASS test : CLASS fb/object
	IS_INSTANTIABLE;
	VARIABLES
		//varVoid: C_TYPE<OV_VOID>;
		varByte: ANY;
		varBool: BOOL;
		varInt: INT INITIALVALUE=-1;
		varUint: UINT INITIALVALUE=1;
		varSingle: SINGLE INITIALVALUE=1.1;
		varDouble: DOUBLE INITIALVALUE=-1.1;
		varString: STRING INITIALVALUE="string test";
		varTime:	TIME;
		varTimeSpan:	TIME_SPAN;
		varState:	C_TYPE<OV_STATE>;
		varStruct:	C_TYPE<TestStruct>;
		
		
		varByteVec:	ANY;
		varBoolVec[]: BOOL;
		varIntVec[]:	INT;
		varUintVec[]:	UINT;
		varSingleVec[]:	SINGLE;
		varDoubleVec[]:	DOUBLE;
		varStringVec[]:	STRING;
		varTimeVec[]:	TIME;
		varTimeSpanVec[]:	TIME_SPAN;
		//varStructVec:	C_TYPE<TestStruct>;
		
	END_VARIABLES;
	PARTS
		testpart1:	CLASS ksxdr/xdrClient;
		testpart2:	CLASS ksxdr/xdrClient;
	END_PARTS;
	OPERATIONS
		startup				:	C_FUNCTION <OV_FNC_STARTUP>;
		shutdown				:	C_FUNCTION <OV_FNC_SHUTDOWN>;
		getaccess			:	C_FUNCTION <OV_FNC_GETACCESS>;		/*	just to make all variables visible on KS	*/
	END_OPERATIONS;
	END_CLASS;

	/**
		Add associations and their documentation here.
		Association syntax is:
	*/
	//ASSOCIATION assocName : ONE_TO_MANY
	//	PARENT parentVarName : CLASS ov/object;
	//	CHILD  childVarName : CLASS ov/object;
	//END_ASSOCIATION;
	
END_LIBRARY;
